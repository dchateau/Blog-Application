import { useEffect, useState } from "react";
import Head from "next/head";
import { useRouter } from "next/router";

import { getCategories, getPosts } from "@post/helpers";
import PostsPage from "../src/post/pages/PostsPage";
import AppTheme from "theme/AppTheme";

import type { ReactElement } from "react";
import type { NextRouter } from "next/router";
import type { GetStaticProps, InferGetStaticPropsType } from "next";
import type { Category, CategoryFields, PostFields } from "@typings/contentful";

const Home = ({
  categories,
  posts: postsProps,
}: InferGetStaticPropsType<typeof getStaticProps>): ReactElement => {
  const router: NextRouter = useRouter();
  const [posts, setPosts] = useState<PostFields[]>(postsProps);
  const [activeCategory, setActiveCategory] = useState<string>("");

  useEffect(() => {
    router.replace("/", undefined, { shallow: false });
  }, []);

  useEffect(() => {
    const onRouteChange = (url: string): void => {
      let category: string[] | string = url.split("?");
      let categoryAsString: CategoryFields[];

      if (category.length === 1) {
        setPosts(postsProps);
        setActiveCategory("");
        return;
      }
      category = category[1].split("=");
      category = category[1];

      categoryAsString = categories.filter(
        (cat: CategoryFields) => cat.slug === category
      );
      setActiveCategory(categoryAsString[0].title);
      // console.log(categoryAsString[0].title);

      const filtered: PostFields[] = postsProps.filter((post: PostFields) => {
        const postCategories: Category[] | undefined = post.categories;
        const postHasCategory: number | undefined = postCategories?.findIndex(
          (postCategory: Category) => postCategory.fields.slug === category
        );
        if (postHasCategory !== -1) return post;
      });

      setPosts(filtered);
    };

    router.events.on("routeChangeComplete", onRouteChange);
  }, [router.events]);

  return (
    <div>
      <Head>
        <title>Blog application</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/gluo.ico" />
      </Head>
      <AppTheme>
        <PostsPage
          posts={posts}
          categories={categories}
          activeCategory={activeCategory}
        />
      </AppTheme>
    </div>
  );
};

export default Home;

export const getStaticProps: GetStaticProps<{
  categories: CategoryFields[];
  posts: PostFields[];
}> = async (props) => {
  const posts: PostFields[] = getPosts();
  const categories: CategoryFields[] = getCategories();

  return {
    props: {
      categories,
      posts,
      ...props,
    },
  };
};
